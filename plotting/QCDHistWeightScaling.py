###################################################################################################
#   QCDHistWeightScaling.py                                                                       #
#   Description: combine QCD histograms generated by writeHistograms.py according to their        #
#                respective cross-sections                                                        #
#   Author: Elliott Kauffman                                                                      #
###################################################################################################

###################################################################################################
# IMPORTS
import ROOT

###################################################################################################
# GLOBAL VARIABLES
histList = [
    "leadJet_Pt",
    "leadJet_Eta",
    "leadJet_Phi",
    "leadJet_E",
    "leadJet_nConstituent",
    "leadJet_HB_avgConstituentHcalDepthEF1",
    "leadJet_HB_avgConstituentHcalDepthEF2",
    "leadJet_HB_avgConstituentHcalDepthEF3",
    "leadJet_HB_avgConstituentHcalDepthEF4",
    "leadJet_HE_avgConstituentHcalDepthEF1",
    "leadJet_HE_avgConstituentHcalDepthEF2",
    "leadJet_HE_avgConstituentHcalDepthEF3",
    "leadJet_HE_avgConstituentHcalDepthEF4",
    "leadJet_HE_avgConstituentHcalDepthEF5",
    "leadJet_HE_avgConstituentHcalDepthEF6",
    "leadJet_HE_avgConstituentHcalDepthEF7",
    "leadJet_HB_pTWeightedAvgConstituentHcalDepthEF1",
    "leadJet_HB_pTWeightedAvgConstituentHcalDepthEF2",
    "leadJet_HB_pTWeightedAvgConstituentHcalDepthEF3",
    "leadJet_HB_pTWeightedAvgConstituentHcalDepthEF4",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF1",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF2",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF3",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF4",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF5",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF6",
    "leadJet_HE_pTWeightedAvgConstituentHcalDepthEF7",
    "leadJet_HB_medConstituentHcalDepthEF1",
    "leadJet_HB_medConstituentHcalDepthEF2",
    "leadJet_HB_medConstituentHcalDepthEF3",
    "leadJet_HB_medConstituentHcalDepthEF4",
    "leadJet_HE_medConstituentHcalDepthEF1",
    "leadJet_HE_medConstituentHcalDepthEF2",
    "leadJet_HE_medConstituentHcalDepthEF3",
    "leadJet_HE_medConstituentHcalDepthEF4",
    "leadJet_HE_medConstituentHcalDepthEF5",
    "leadJet_HE_medConstituentHcalDepthEF6",
    "leadJet_HE_medConstituentHcalDepthEF7",
    "leadJet_HB_minConstituentHcalDepthEF1",
    "leadJet_HB_minConstituentHcalDepthEF2",
    "leadJet_HB_minConstituentHcalDepthEF3",
    "leadJet_HB_minConstituentHcalDepthEF4",
    "leadJet_HE_minConstituentHcalDepthEF1",
    "leadJet_HE_minConstituentHcalDepthEF2",
    "leadJet_HE_minConstituentHcalDepthEF3",
    "leadJet_HE_minConstituentHcalDepthEF4",
    "leadJet_HE_minConstituentHcalDepthEF5",
    "leadJet_HE_minConstituentHcalDepthEF6",
    "leadJet_HE_minConstituentHcalDepthEF7",
    "leadJet_HB_maxConstituentHcalDepthEF1",
    "leadJet_HB_maxConstituentHcalDepthEF2",
    "leadJet_HB_maxConstituentHcalDepthEF3",
    "leadJet_HB_maxConstituentHcalDepthEF4",
    "leadJet_HE_maxConstituentHcalDepthEF1",
    "leadJet_HE_maxConstituentHcalDepthEF2",
    "leadJet_HE_maxConstituentHcalDepthEF3",
    "leadJet_HE_maxConstituentHcalDepthEF4",
    "leadJet_HE_maxConstituentHcalDepthEF5",
    "leadJet_HE_maxConstituentHcalDepthEF6",
    "leadJet_HE_maxConstituentHcalDepthEF7"
]

samples = {
    "QCD_Bin-Pt-30to50": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-30to50.root",
        "xsec": 1.122e+08,
        "nEvents": 3995512,
    },
    "QCD_Bin-Pt-50to80": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-50to80.root",
        "xsec": 1.92043e+07,
        "nEvents": 2515120,
    },
    "QCD_Bin-Pt-80to120": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-80to120.root",
        "xsec": 2.76253e+06,
        "nEvents": 997032,
    },
    "QCD_Bin-Pt-120to170": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-120to170.root",
        "xsec": 4.411e+05,
        "nEvents": 1497789,
    },
    "QCD_Bin-Pt-170to300": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-170to300.root",
        "xsec": 1.127e+05,
        "nEvents": 998538,
    },
    "QCD_Bin-Pt-300to470": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-300to470.root",
        "xsec": 7823.28,
        "nEvents": 996440,
    },
    "QCD_Bin-Pt-470to600": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-470to600.root",
        "xsec": 648.174,
        "nEvents": 995704,
    },
    "QCD_Bin-Pt-600to800": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-600to800.root",
        "xsec": 178.6,
        "nEvents": 998588,
    },
    "QCD_Bin-Pt-800to1000": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-800to1000.root",
        "xsec": 30.57,
        "nEvents": 999304,
    },
    "QCD_Bin-Pt-1000": {
        "histogramPath": "histograms/histograms_QCD_Bin-Pt-1000.root",
        "xsec": 9.8529,
        "nEvents": 999294,
    },
}

###################################################################################################
# MAIN METHOD
def main():

    samples_copy = samples.copy()

    # open files and get histograms
    for sample in samples_copy.keys():
        samples_copy[sample]["openFile"] = ROOT.TFile(samples_copy[sample]["histogramPath"])
        for hist in histList:
            samples_copy[sample][hist] = samples_copy[sample]["openFile"].Get(hist).Clone()
            samples_copy[sample][hist].SetDirectory(0)
            # scale histogram
            samples_copy[sample][hist].Scale(samples_copy[sample]["xsec"]/samples_copy[sample]["nEvents"])

    print("Combining hists")
    # combine histograms
    sampleList = list(samples_copy.keys())
    combinedHists = {}
    for hist in histList:
        print("    ", hist)
        combinedHistTemp = samples_copy[sampleList[0]][hist].Clone(hist)
        for i in range(1,len(sampleList)):
            combinedHistTemp.Add(samples_copy[sampleList[i]][hist])
        combinedHists[hist] = combinedHistTemp
    
    print("Writing to output file")
    # write histogram to output file
    output_file = ROOT.TFile("histograms/histograms_QCD_Combined.root", "RECREATE")
    for hist in combinedHists.keys():
        print("    ", hist)
        combinedHists[hist].Write()

    print("Wrote successfully. Closing files...")
    # close files
    for sample in samples_copy.keys():
        print(sample)
        print(samples_copy[sample]["openFile"])
        samples_copy[sample]["openFile"].Close()
    output_file.Close()

    print("Finished closing files")

    del samples_copy
    del combinedHists


###################################################################################################
# RUN MAIN METHOD
if __name__ == "__main__":
    ROOT.gErrorIgnoreLevel = ROOT.kWarning
    ROOT.SetMemoryPolicy(ROOT.kMemoryStrict)

    main()
